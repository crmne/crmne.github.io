I"…9<p>Since version 1.2, Google <a href="https://www.tensorflow.org/install/install_mac">dropped GPU support</a> on macOS from TensorFlow.</p>

<p>Itâ€™s understandable. As of today, the <a href="https://support.apple.com/kb/SP704?locale=en_US">last Mac that integrated an nVidia GPU</a> was released in 2014. <em>Only</em> their latest operating system, macOS High Sierra, supports external GPUs via Thunderbolt 3.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup> Who doesnâ€™t have the money to get one of the latest MacBook Pro, plus an external GPU enclosure, plus a GPU, ðŸ’¸ <em>has to</em> purchase an <a href="https://support.apple.com/kb/SP652?viewlocale=en_US&amp;locale=en_US">old MacPro</a> and fit a GPU in there. Any way you see it, itâ€™s <em>quite a niche market</em>.</p>

<p>At least <em>officially</em>.</p>

<p>Thereâ€™s another community that Google forgot. That, is the <em>Hackintosh</em> community. At the time of writing, there are 1,475,600 members and 1,510,374 messages in <a href="https://www.tonymacx86.com/forums/">tonymacx86.comâ€™s forums</a>, one of the biggest forums for Hackintosh users. That is not a small community. Maybe Google didnâ€™t forget. Maybe they fear endorsing a violation of Appleâ€™s licensing agreement.</p>

<p>Whatever the reason, TensorFlow isnâ€™t supported on CUDA GPUs on macOS.</p>

<p>Hereâ€™s how to get that back.</p>

<h2 id="clone-the-tensorflow-repository">Clone the TensorFlow repository</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/tensorflow/tensorflow
<span class="nb">cd </span>tensorflow
git checkout tags/v1.4.0
</code></pre></div></div>

<h2 id="prepare-the-environment">Prepare the environment</h2>

<p>If you do not have <em>homebrew</em> installed, install it by following <a href="https://brew.sh">these instructions</a>.</p>

<p>After installing brew, install GNU coreutils, python3, gcc 7<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup>, and bazel by issuing the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>coreutils python3 gcc bazel
</code></pre></div></div>

<p>Now you can install TensorFlowâ€™s Python dependencies by using pip:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>six numpy wheel
</code></pre></div></div>

<h3 id="cuda-and-xcode">CUDA and Xcode</h3>
<p>Itâ€™s time to install <a href="https://developer.nvidia.com/cuda">CUDA</a> and <a href="https://developer.nvidia.com/cudnn">cuDNN</a>.</p>

<p>Note that CUDA 9.0 is not yet compatible with Xcode 9.x. You can check the compatible Xcode version with the latest CUDA release in <a href="http://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html">CUDAâ€™s official documentation</a>.</p>

<p><a href="https://developer.apple.com/download/more/">Here</a>â€™s the download page for old Xcode versions. At the time of writing, the latest compatible Xcode with CUDA 9.0 is <a href="https://download.developer.apple.com/Developer_Tools/Xcode_8.3.3/Xcode8.3.3.xip">Xcode 8.3.3</a>. I recommend you to not overwrite the latest Xcode, or homebrew will complain that you have outdated tools. Rather, install the older version in another folder, then tell the system to use that one for now<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>xcode-select <span class="nt">-s</span> /Applications/Xcode<span class="se">\ </span>8.3.3/Xcode.app
</code></pre></div></div>

<p>cuDNN doesnâ€™t have an installer, so we need to extract it and copy it to CUDAâ€™s folder by exeuting:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>xvf cudnn-<span class="k">*</span>.tgz
<span class="nb">sudo cp</span> <span class="nt">-rv</span> cuda/<span class="k">*</span> /usr/local/cuda/
</code></pre></div></div>

<h2 id="patching-tensorflow">Patching TensorFlow</h2>

<p>Since dropping support for macOS, TensorFlow consequently dropped support for <a href="http://clang.llvm.org/">clang</a>, macOS default compiler and the one included in Xcode.</p>

<p>With the first patch we can restore compatibility, while with the second we will use <a href="https://gcc.gnu.org/onlinedocs/libgomp/">libgomp</a> from gcc 7. You can download the patches <a href="https://gist.github.com/crmne/474b44eca214e1c8238f52b21d209dcb/archive/master.zip">here</a>.</p>

<p>Extract them in the <code class="language-plaintext highlighter-rouge">tensorflow</code> folder and patch TensorFlow by issuing the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="k">*</span>.patch<span class="p">;</span> <span class="k">do </span>patch <span class="nt">-p1</span> &lt; <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<h2 id="configure-the-installation">Configure the installation</h2>

<p>In a moment youâ€™ll configure TensorFlow by running the <code class="language-plaintext highlighter-rouge">configure</code> script (naturally), but before that youâ€™ll need to note the following:</p>

<ul>
  <li>Your CUDA GPU Compute Capability, which you can check <a href="https://developer.nvidia.com/cuda-gpus">here</a>. For example, a GTX 1070 has Compute Capability 6.1</li>
  <li>The location of the python3 executable, by running <code class="language-plaintext highlighter-rouge">which python3</code>. You can copy this value to the clipboard by running <code class="language-plaintext highlighter-rouge">which python3 | pbcopy</code></li>
  <li>The CUDA and cuDNN versions you have, e.g. 9.0 and 7, respectively</li>
  <li>The gcc that should be used by nvcc as the host compiler should be <code class="language-plaintext highlighter-rouge">/usr/bin/gcc</code>. See footnote<sup id="fnref:2:1" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup>.</li>
</ul>

<p>Now you are ready to answer <code class="language-plaintext highlighter-rouge">configure</code>â€™s questions yourself. Hereâ€™s an example run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./configure
You have bazel 0.7.0-homebrew installed.
Please specify the location of python. [Default is /usr/bin/python]: /usr/local/bin/python3


Found possible Python library paths:
  /usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages
Please input the desired Python library path to use.  Default is [/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages]

Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]:
Google Cloud Platform support will be enabled for TensorFlow.

Do you wish to build TensorFlow with Hadoop File System support? [Y/n]:
Hadoop File System support will be enabled for TensorFlow.

Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]:
Amazon S3 File System support will be enabled for TensorFlow.

Do you wish to build TensorFlow with XLA JIT support? [y/N]:
No XLA JIT support will be enabled for TensorFlow.

Do you wish to build TensorFlow with GDR support? [y/N]:
No GDR support will be enabled for TensorFlow.

Do you wish to build TensorFlow with VERBS support? [y/N]:
No VERBS support will be enabled for TensorFlow.

Do you wish to build TensorFlow with OpenCL support? [y/N]:
No OpenCL support will be enabled for TensorFlow.

Do you wish to build TensorFlow with CUDA support? [y/N]: y
CUDA support will be enabled for TensorFlow.

Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 8.0]: 9.0


Please specify the location where CUDA 9.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:


Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 6.0]: 7


Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:


Please specify a list of comma-separated Cuda compute capabilities you want to build with.
You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.
Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1


Do you want to use clang as CUDA compiler? [y/N]:
nvcc will be used as CUDA compiler.

Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:


Do you wish to build TensorFlow with MPI support? [y/N]:
No MPI support will be enabled for TensorFlow.

Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified [Default is -march=native]:


Add "--config=mkl" to your bazel command to build with MKL support.
Please note that MKL on MacOS or windows is still not supported.
If you would like to use a local MKL instead of downloading, please set the environment variable "TF_MKL_ROOT" every time before build.
Configuration finished
</code></pre></div></div>

<h2 id="compile-tensorflow">Compile TensorFlow</h2>

<p>Before starting to compile TensorFlow, weâ€™ll need to tell bazel to pass around the correct environment variables that tell the linker to link with CUDA.</p>

<p>Compiling everything will take a while.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
<span class="nb">export </span><span class="nv">DYLD_LIBRARY_PATH</span><span class="o">=</span>/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$DYLD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$DYLD_LIBRARY_PATH</span>:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">flags</span><span class="o">=</span><span class="s2">"--config=cuda --config=opt"</span>
bazel build <span class="nv">$flags</span> <span class="nt">--action_env</span> PATH <span class="nt">--action_env</span> LD_LIBRARY_PATH <span class="nt">--action_env</span> DYLD_LIBRARY_PATH //tensorflow/tools/pip_package:build_pip_package
</code></pre></div></div>

<h2 id="install-pip-package">Install pip package</h2>

<p>If everything went well, you can finally install TensorFlow in the following way:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
pip3 <span class="nb">install</span> <span class="nt">-U</span> /tmp/tensorflow_pkg/tensorflow-1.4.0-<span class="k">*</span>.whl
</code></pre></div></div>

<h2 id="validate-your-installation">Validate your installation</h2>

<p>Validate your TensorFlow installation by doing the following:</p>

<p>Change directory (<code class="language-plaintext highlighter-rouge">cd</code>) to any directory on your system other than the tensorflow subdirectory from which you invoked the <code class="language-plaintext highlighter-rouge">configure</code> command.</p>

<p>Prepare the environment for running CUDA jobs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
<span class="nb">export </span><span class="nv">DYLD_LIBRARY_PATH</span><span class="o">=</span>/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$DYLD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>Consider writing those exports to your <code class="language-plaintext highlighter-rouge">.bashrc</code>, to have your environment ready all the time.</p>

<p>Now invoke python:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3
</code></pre></div></div>

<p>and enter the following short program inside the python interactive shell:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="n">hello</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">constant</span><span class="p">(</span><span class="s">'Hello, TensorFlow!'</span><span class="p">)</span>
<span class="n">sess</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">sess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">hello</span><span class="p">))</span>
</code></pre></div></div>

<p>If the system outputs the following, then you are ready to begin writing TensorFlow programs!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, TensorFlow!
</code></pre></div></div>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>macOS High Sierra was released Sept. 25 2017, a few months later than TensorFlow 1.2, June 15 2017Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>gcc-7 is only needed since libgomp is missing from a standard macOS installÂ <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a>Â <a href="#fnref:2:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>Note that you can switch back to the latest Xcode with: <code class="language-plaintext highlighter-rouge">sudo xcode-select -s /Applications/Xcode.app</code>Â <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET